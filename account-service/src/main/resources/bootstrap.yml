server:
  port: 8081
  servlet:
    context-path: /diamond


jwt:
  route:
    authentication:
      path: /auth
  header: Authorization
  expiration: 604800
  secret: ssccrrtt
spring:
  application:
    name: diamond
  cloud:
    nacos:
      config:
        extension-configs:
          - data-id: gralic.yaml
            refresh: true

---
management:
  endpoints:
    web:
      exposure:
        include: "*"
spring:
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.2.101:8848
      config:
        server-addr: 192.168.2.101:8848
    

---
logging:
  config: classpath:log4jMa.xml
mybatis:
  mapper-locations: classpath:mybatis/mapper/*.xml
  type-aliases-package: com.fd.diamond.model.entity

#master 数据源配置
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 配置Druid的其他参数，以下配置必须增加一个配置文件才能有效
    # 初始化大小，最小，最大
    druid:
      # 主库数据源
      master:
        url: jdbc:mysql://192.168.2.111:3306/gp_test?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
        username: root
        password: 123456
      #从数据库
      slave:
        url: jdbc:mysql://你的ip:端口;DatabaseName=test2;
        username: test
        password: test
      # 连接池配置
      #初始化连接池大小
      initial-size: 5
      #最大连接数
      max-active: 20
      #最小连接数
      min-idle: 1
      #配置获取连接等待超时的时间
      max-wait: 60000
      #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
      pool-prepared-statements: false
      #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      timeBetweenEvictionRunsMillis: 300000
      # max-open-prepared-statements= #和上面的等价
      #用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      validation-query: SELECT 'X'
      #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      testOnBorrow: true
      #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnReturn: false
      #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      #有两个含义：1、Destroy线程会检测连接的间隔时间；2、testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      #time-between-eviction-runs-millis:
      ##一个连接在池中最小生存的时间(ms)
      #min-evictable-idle-time-millis: 30000
      ##一个连接在池中最大生存的时间(ms)
      #max-evictable-idle-time-millis: 60000
      #监控配置
      # WebStatFilter配置
      web-stat-filter:
        enabled: true
#        url-pattern:
#        exclusions:
#        session-stat-enable:
#        session-stat-max-count:
#        principal-session-name:
#        principal-cookie-name:
#        profile-enable:
      #StatViewServlet配置
      stat-view-servlet:
        enabled: true
#        url-pattern:
#        reset-enable:
        login-username: admin
        login-password: admin
#        allow:
#        deny:
      #Spring监控配置
      #aop-patterns:
      #slf4j
      filter:
        log4j2:
          enabled: true

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
redis:
  #redis机器ip
  hostname: 127.0.0.1
  #redis端口
  port: 6379
  #redis密码
  password:
  #redis超时时间（毫秒），如果不设置，取默认值2000
  timeout: 10000
  #最大空闲数
  maxIdle: 300
  #连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal
  #maxActive=600
  #控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
  maxTotal: 1000
  #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
  maxWaitMillis: 1000
  #连接的最小空闲时间 默认1800000毫秒(30分钟)
  minEvictableIdleTimeMillis: 300000
  #每次释放连接的最大数目,默认3
  numTestsPerEvictionRun: 1024
  #逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
  timeBetweenEvictionRunsMillis: 30000
  #是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
  testOnBorrow: true
  #在空闲时检查有效性, 默认false
  testWhileIdle: true

  #redis集群配置
  #spring.cluster.nodes=192.168.1.1:7001,192.168.1.1:7002,192.168.1.1:7003,192.168.1.1:7004,192.168.1.1:7005,192.168.1.1:7006
  #spring.cluster.max-redirects=3

  #哨兵模式
  #sentinel.host1=192.168.1.1
  #sentinel.port1=26379

  #sentinel.host2=192.168.1.2
  #sentinel.port2=26379